// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  users       User[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role?     @relation(fields: [roleId], references: [id])
  roleId        Int?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model unitOfMeasurement {
  id      Int    @id @default(autoincrement())
  name    String
  initial String

  createdAt DateTime? @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)
}

model gender {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime? @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)

  animals animal[]
}

model menu {
  id        Int    @id @default(autoincrement())
  name      String
  url       String
  icon      String
  listOrder Int

  createdAt DateTime? @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
}

model animalType {
  id   Int    @id @default(autoincrement())
  name String
  icon String

  animalCategories animalCategory[]

  createdAt DateTime? @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)
}

model animalCategory {
  id   Int    @id @default(autoincrement())
  name String

  animalTypeId Int?
  animalType   animalType? @relation(fields: [animalTypeId], references: [id])

  animalBreeds animalBreed[]

  createdAt DateTime? @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)
}

model animalBreed {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  animalCategoryId Int?
  animalCategory   animalCategory? @relation(fields: [animalCategoryId], references: [id])

  createdAt DateTime? @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)

  animals animal[]
}

model animal {
  id     Int     @id @default(autoincrement())
  tag    String
  image  String?
  status Boolean @default(false)

  genderId Int
  gender   gender @relation(fields: [genderId], references: [id])

  animalBreedId Int
  animalBreed   animalBreed @relation(fields: [animalBreedId], references: [id])

  bornAt      DateTime? @db.Timestamptz(3)
  purchasedAt DateTime? @db.Timestamptz(3)
  createdAt   DateTime? @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt   DateTime? @db.Timestamptz(3)
}
